// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// edist2cpp
NumericMatrix edist2cpp(const NumericMatrix& A1, const NumericMatrix& A2);
RcppExport SEXP _secr_edist2cpp(SEXP A1SEXP, SEXP A2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type A1(A1SEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type A2(A2SEXP);
    rcpp_result_gen = Rcpp::wrap(edist2cpp(A1, A2));
    return rcpp_result_gen;
END_RCPP
}
// xydist2cpp
NumericMatrix xydist2cpp(const NumericMatrix& A1, const NumericMatrix& A2);
RcppExport SEXP _secr_xydist2cpp(SEXP A1SEXP, SEXP A2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type A1(A1SEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type A2(A2SEXP);
    rcpp_result_gen = Rcpp::wrap(xydist2cpp(A1, A2));
    return rcpp_result_gen;
END_RCPP
}
// nearestcpp
List nearestcpp(const NumericMatrix& xy, const NumericMatrix& traps, bool non_zero);
RcppExport SEXP _secr_nearestcpp(SEXP xySEXP, SEXP trapsSEXP, SEXP non_zeroSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type xy(xySEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type traps(trapsSEXP);
    Rcpp::traits::input_parameter< bool >::type non_zero(non_zeroSEXP);
    rcpp_result_gen = Rcpp::wrap(nearestcpp(xy, traps, non_zero));
    return rcpp_result_gen;
END_RCPP
}
// insidecpp
bool insidecpp(const NumericVector& xy, const int n1, const int n2, const NumericMatrix& poly);
RcppExport SEXP _secr_insidecpp(SEXP xySEXP, SEXP n1SEXP, SEXP n2SEXP, SEXP polySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type xy(xySEXP);
    Rcpp::traits::input_parameter< const int >::type n1(n1SEXP);
    Rcpp::traits::input_parameter< const int >::type n2(n2SEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type poly(polySEXP);
    rcpp_result_gen = Rcpp::wrap(insidecpp(xy, n1, n2, poly));
    return rcpp_result_gen;
END_RCPP
}
// movematcpp
IntegerMatrix movematcpp(int ntrap, const IntegerVector& trapno);
RcppExport SEXP _secr_movematcpp(SEXP ntrapSEXP, SEXP trapnoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type ntrap(ntrapSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type trapno(trapnoSEXP);
    rcpp_result_gen = Rcpp::wrap(movematcpp(ntrap, trapno));
    return rcpp_result_gen;
END_RCPP
}
// naivedcpp
double naivedcpp(const double sigma, const IntegerVector& wt, const NumericMatrix& traps, const NumericMatrix& animals, const int fn);
RcppExport SEXP _secr_naivedcpp(SEXP sigmaSEXP, SEXP wtSEXP, SEXP trapsSEXP, SEXP animalsSEXP, SEXP fnSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type wt(wtSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type traps(trapsSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type animals(animalsSEXP);
    Rcpp::traits::input_parameter< const int >::type fn(fnSEXP);
    rcpp_result_gen = Rcpp::wrap(naivedcpp(sigma, wt, traps, animals, fn));
    return rcpp_result_gen;
END_RCPP
}
// naivecap3cpp
double naivecap3cpp(const int detect, const double lambda0, const double sigma, const NumericMatrix& Tsk, const NumericMatrix& traps, const NumericMatrix& mask, const int fn);
RcppExport SEXP _secr_naivecap3cpp(SEXP detectSEXP, SEXP lambda0SEXP, SEXP sigmaSEXP, SEXP TskSEXP, SEXP trapsSEXP, SEXP maskSEXP, SEXP fnSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type detect(detectSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda0(lambda0SEXP);
    Rcpp::traits::input_parameter< const double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type Tsk(TskSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type traps(trapsSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type mask(maskSEXP);
    Rcpp::traits::input_parameter< const int >::type fn(fnSEXP);
    rcpp_result_gen = Rcpp::wrap(naivecap3cpp(detect, lambda0, sigma, Tsk, traps, mask, fn));
    return rcpp_result_gen;
END_RCPP
}
// getdenomcpp
Rcpp::List getdenomcpp(int fn, Rcpp::NumericVector miscparm, Rcpp::NumericMatrix mask, int mm, double sigma, double z);
RcppExport SEXP _secr_getdenomcpp(SEXP fnSEXP, SEXP miscparmSEXP, SEXP maskSEXP, SEXP mmSEXP, SEXP sigmaSEXP, SEXP zSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type fn(fnSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type miscparm(miscparmSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type mask(maskSEXP);
    Rcpp::traits::input_parameter< int >::type mm(mmSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type z(zSEXP);
    rcpp_result_gen = Rcpp::wrap(getdenomcpp(fn, miscparm, mask, mm, sigma, z));
    return rcpp_result_gen;
END_RCPP
}
// gethcpp
List gethcpp(int nc1, int cc, int nmix, int nk, int ss, int mm, const IntegerVector PIA, const NumericMatrix Tsk, const NumericVector hk);
RcppExport SEXP _secr_gethcpp(SEXP nc1SEXP, SEXP ccSEXP, SEXP nmixSEXP, SEXP nkSEXP, SEXP ssSEXP, SEXP mmSEXP, SEXP PIASEXP, SEXP TskSEXP, SEXP hkSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nc1(nc1SEXP);
    Rcpp::traits::input_parameter< int >::type cc(ccSEXP);
    Rcpp::traits::input_parameter< int >::type nmix(nmixSEXP);
    Rcpp::traits::input_parameter< int >::type nk(nkSEXP);
    Rcpp::traits::input_parameter< int >::type ss(ssSEXP);
    Rcpp::traits::input_parameter< int >::type mm(mmSEXP);
    Rcpp::traits::input_parameter< const IntegerVector >::type PIA(PIASEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type Tsk(TskSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type hk(hkSEXP);
    rcpp_result_gen = Rcpp::wrap(gethcpp(nc1, cc, nmix, nk, ss, mm, PIA, Tsk, hk));
    return rcpp_result_gen;
END_RCPP
}
// hdotpolycpp
NumericVector hdotpolycpp(const NumericMatrix& xy, const NumericMatrix& traps, const NumericMatrix& Tsk, const IntegerVector& markocc, const IntegerVector& cumk, const int& detectfn, const NumericVector& gsb, const bool& convex, const int& dim, const int& grain, const int& ncores);
RcppExport SEXP _secr_hdotpolycpp(SEXP xySEXP, SEXP trapsSEXP, SEXP TskSEXP, SEXP markoccSEXP, SEXP cumkSEXP, SEXP detectfnSEXP, SEXP gsbSEXP, SEXP convexSEXP, SEXP dimSEXP, SEXP grainSEXP, SEXP ncoresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type xy(xySEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type traps(trapsSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type Tsk(TskSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type markocc(markoccSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type cumk(cumkSEXP);
    Rcpp::traits::input_parameter< const int& >::type detectfn(detectfnSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gsb(gsbSEXP);
    Rcpp::traits::input_parameter< const bool& >::type convex(convexSEXP);
    Rcpp::traits::input_parameter< const int& >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< const int& >::type grain(grainSEXP);
    Rcpp::traits::input_parameter< const int& >::type ncores(ncoresSEXP);
    rcpp_result_gen = Rcpp::wrap(hdotpolycpp(xy, traps, Tsk, markocc, cumk, detectfn, gsb, convex, dim, grain, ncores));
    return rcpp_result_gen;
END_RCPP
}
// makegkPointcpp
List makegkPointcpp(const int detectfn, const int grain, const int ncores, const NumericMatrix& gsbval, const NumericMatrix& dist2, const NumericVector& miscparm);
RcppExport SEXP _secr_makegkPointcpp(SEXP detectfnSEXP, SEXP grainSEXP, SEXP ncoresSEXP, SEXP gsbvalSEXP, SEXP dist2SEXP, SEXP miscparmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type detectfn(detectfnSEXP);
    Rcpp::traits::input_parameter< const int >::type grain(grainSEXP);
    Rcpp::traits::input_parameter< const int >::type ncores(ncoresSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type gsbval(gsbvalSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type dist2(dist2SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type miscparm(miscparmSEXP);
    rcpp_result_gen = Rcpp::wrap(makegkPointcpp(detectfn, grain, ncores, gsbval, dist2, miscparm));
    return rcpp_result_gen;
END_RCPP
}
// cappedgkhkcpp
List cappedgkhkcpp(const int cc, const int nk, const double area, const NumericVector& D, NumericVector& gk, NumericVector& hk);
RcppExport SEXP _secr_cappedgkhkcpp(SEXP ccSEXP, SEXP nkSEXP, SEXP areaSEXP, SEXP DSEXP, SEXP gkSEXP, SEXP hkSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type cc(ccSEXP);
    Rcpp::traits::input_parameter< const int >::type nk(nkSEXP);
    Rcpp::traits::input_parameter< const double >::type area(areaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type D(DSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type gk(gkSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type hk(hkSEXP);
    rcpp_result_gen = Rcpp::wrap(cappedgkhkcpp(cc, nk, area, D, gk, hk));
    return rcpp_result_gen;
END_RCPP
}
// makegkPolygoncpp
List makegkPolygoncpp(const int detectfn, const int dim, const bool convex, const int grain, const int ncores, const NumericMatrix& gsbval, const IntegerVector& cumk, const NumericMatrix& traps, const NumericMatrix& mask);
RcppExport SEXP _secr_makegkPolygoncpp(SEXP detectfnSEXP, SEXP dimSEXP, SEXP convexSEXP, SEXP grainSEXP, SEXP ncoresSEXP, SEXP gsbvalSEXP, SEXP cumkSEXP, SEXP trapsSEXP, SEXP maskSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type detectfn(detectfnSEXP);
    Rcpp::traits::input_parameter< const int >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< const bool >::type convex(convexSEXP);
    Rcpp::traits::input_parameter< const int >::type grain(grainSEXP);
    Rcpp::traits::input_parameter< const int >::type ncores(ncoresSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type gsbval(gsbvalSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type cumk(cumkSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type traps(trapsSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type mask(maskSEXP);
    rcpp_result_gen = Rcpp::wrap(makegkPolygoncpp(detectfn, dim, convex, grain, ncores, gsbval, cumk, traps, mask));
    return rcpp_result_gen;
END_RCPP
}
// makelookupcpp
List makelookupcpp(const NumericMatrix& x);
RcppExport SEXP _secr_makelookupcpp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(makelookupcpp(x));
    return rcpp_result_gen;
END_RCPP
}
// nkpointcpp
NumericVector nkpointcpp(const NumericVector& D, const NumericMatrix& dist2, const IntegerVector& detect, const NumericMatrix& Tsk, const IntegerVector& markocc, const int& fn, const NumericVector& gsb, const NumericVector& miscparm, const double& w2, const IntegerVector& binomN, const int& grain, const int& ncores);
RcppExport SEXP _secr_nkpointcpp(SEXP DSEXP, SEXP dist2SEXP, SEXP detectSEXP, SEXP TskSEXP, SEXP markoccSEXP, SEXP fnSEXP, SEXP gsbSEXP, SEXP miscparmSEXP, SEXP w2SEXP, SEXP binomNSEXP, SEXP grainSEXP, SEXP ncoresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type D(DSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type dist2(dist2SEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type detect(detectSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type Tsk(TskSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type markocc(markoccSEXP);
    Rcpp::traits::input_parameter< const int& >::type fn(fnSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gsb(gsbSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type miscparm(miscparmSEXP);
    Rcpp::traits::input_parameter< const double& >::type w2(w2SEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type binomN(binomNSEXP);
    Rcpp::traits::input_parameter< const int& >::type grain(grainSEXP);
    Rcpp::traits::input_parameter< const int& >::type ncores(ncoresSEXP);
    rcpp_result_gen = Rcpp::wrap(nkpointcpp(D, dist2, detect, Tsk, markocc, fn, gsb, miscparm, w2, binomN, grain, ncores));
    return rcpp_result_gen;
END_RCPP
}
// pdotpointcpp
NumericVector pdotpointcpp(const NumericMatrix& xy, const NumericMatrix& traps, const NumericMatrix& dist2, const IntegerVector& detect, const NumericMatrix& Tsk, const IntegerVector& markocc, const int& fn, const NumericMatrix& gl0, const NumericMatrix& sig, const NumericVector& otherdetpar, const NumericVector& miscparm, const double& w2, const IntegerVector& binomN, const int& grain, const int& ncores);
RcppExport SEXP _secr_pdotpointcpp(SEXP xySEXP, SEXP trapsSEXP, SEXP dist2SEXP, SEXP detectSEXP, SEXP TskSEXP, SEXP markoccSEXP, SEXP fnSEXP, SEXP gl0SEXP, SEXP sigSEXP, SEXP otherdetparSEXP, SEXP miscparmSEXP, SEXP w2SEXP, SEXP binomNSEXP, SEXP grainSEXP, SEXP ncoresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type xy(xySEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type traps(trapsSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type dist2(dist2SEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type detect(detectSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type Tsk(TskSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type markocc(markoccSEXP);
    Rcpp::traits::input_parameter< const int& >::type fn(fnSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type gl0(gl0SEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type sig(sigSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type otherdetpar(otherdetparSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type miscparm(miscparmSEXP);
    Rcpp::traits::input_parameter< const double& >::type w2(w2SEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type binomN(binomNSEXP);
    Rcpp::traits::input_parameter< const int& >::type grain(grainSEXP);
    Rcpp::traits::input_parameter< const int& >::type ncores(ncoresSEXP);
    rcpp_result_gen = Rcpp::wrap(pdotpointcpp(xy, traps, dist2, detect, Tsk, markocc, fn, gl0, sig, otherdetpar, miscparm, w2, binomN, grain, ncores));
    return rcpp_result_gen;
END_RCPP
}
// fasthistoriescpp
NumericVector fasthistoriescpp(const int mm, const int nc, const int cc, const int grain, const int ncores, const int binomN, const bool indiv, const IntegerMatrix w, const IntegerMatrix ki, const NumericVector gk, const NumericVector hk, const NumericVector density, const IntegerVector PIA, const IntegerVector Tsk, const LogicalMatrix mbool);
RcppExport SEXP _secr_fasthistoriescpp(SEXP mmSEXP, SEXP ncSEXP, SEXP ccSEXP, SEXP grainSEXP, SEXP ncoresSEXP, SEXP binomNSEXP, SEXP indivSEXP, SEXP wSEXP, SEXP kiSEXP, SEXP gkSEXP, SEXP hkSEXP, SEXP densitySEXP, SEXP PIASEXP, SEXP TskSEXP, SEXP mboolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type mm(mmSEXP);
    Rcpp::traits::input_parameter< const int >::type nc(ncSEXP);
    Rcpp::traits::input_parameter< const int >::type cc(ccSEXP);
    Rcpp::traits::input_parameter< const int >::type grain(grainSEXP);
    Rcpp::traits::input_parameter< const int >::type ncores(ncoresSEXP);
    Rcpp::traits::input_parameter< const int >::type binomN(binomNSEXP);
    Rcpp::traits::input_parameter< const bool >::type indiv(indivSEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix >::type w(wSEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix >::type ki(kiSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type gk(gkSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type hk(hkSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type density(densitySEXP);
    Rcpp::traits::input_parameter< const IntegerVector >::type PIA(PIASEXP);
    Rcpp::traits::input_parameter< const IntegerVector >::type Tsk(TskSEXP);
    Rcpp::traits::input_parameter< const LogicalMatrix >::type mbool(mboolSEXP);
    rcpp_result_gen = Rcpp::wrap(fasthistoriescpp(mm, nc, cc, grain, ncores, binomN, indiv, w, ki, gk, hk, density, PIA, Tsk, mbool));
    return rcpp_result_gen;
END_RCPP
}
// polygonhistoriescpp
NumericVector polygonhistoriescpp(const int nc, const int detectfn, const int grain, const int ncores, const double minp, const IntegerVector binomN, const IntegerVector w, const NumericMatrix xy, const IntegerVector start, const IntegerVector group, const NumericVector hk, const NumericVector H, const NumericMatrix gsbval, const NumericMatrix pID, const NumericMatrix mask, const NumericMatrix density, const IntegerVector PIA, const NumericMatrix Tsk, const NumericMatrix h, const IntegerMatrix hindex, const LogicalMatrix mbool, const int debug);
RcppExport SEXP _secr_polygonhistoriescpp(SEXP ncSEXP, SEXP detectfnSEXP, SEXP grainSEXP, SEXP ncoresSEXP, SEXP minpSEXP, SEXP binomNSEXP, SEXP wSEXP, SEXP xySEXP, SEXP startSEXP, SEXP groupSEXP, SEXP hkSEXP, SEXP HSEXP, SEXP gsbvalSEXP, SEXP pIDSEXP, SEXP maskSEXP, SEXP densitySEXP, SEXP PIASEXP, SEXP TskSEXP, SEXP hSEXP, SEXP hindexSEXP, SEXP mboolSEXP, SEXP debugSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type nc(ncSEXP);
    Rcpp::traits::input_parameter< const int >::type detectfn(detectfnSEXP);
    Rcpp::traits::input_parameter< const int >::type grain(grainSEXP);
    Rcpp::traits::input_parameter< const int >::type ncores(ncoresSEXP);
    Rcpp::traits::input_parameter< const double >::type minp(minpSEXP);
    Rcpp::traits::input_parameter< const IntegerVector >::type binomN(binomNSEXP);
    Rcpp::traits::input_parameter< const IntegerVector >::type w(wSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type xy(xySEXP);
    Rcpp::traits::input_parameter< const IntegerVector >::type start(startSEXP);
    Rcpp::traits::input_parameter< const IntegerVector >::type group(groupSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type hk(hkSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type H(HSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type gsbval(gsbvalSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type pID(pIDSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type mask(maskSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type density(densitySEXP);
    Rcpp::traits::input_parameter< const IntegerVector >::type PIA(PIASEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type Tsk(TskSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type h(hSEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix >::type hindex(hindexSEXP);
    Rcpp::traits::input_parameter< const LogicalMatrix >::type mbool(mboolSEXP);
    Rcpp::traits::input_parameter< const int >::type debug(debugSEXP);
    rcpp_result_gen = Rcpp::wrap(polygonhistoriescpp(nc, detectfn, grain, ncores, minp, binomN, w, xy, start, group, hk, H, gsbval, pID, mask, density, PIA, Tsk, h, hindex, mbool, debug));
    return rcpp_result_gen;
END_RCPP
}
// polygonfxicpp
NumericVector polygonfxicpp(const int nc, const int detectfn, const int grain, const int ncores, const double minp, const IntegerVector binomN, const IntegerVector w, const NumericMatrix xy, const IntegerVector start, const IntegerVector group, const NumericVector hk, const NumericVector H, const NumericMatrix gsbval, const NumericMatrix pID, const NumericMatrix mask, const NumericMatrix density, const IntegerVector PIA, const NumericMatrix Tsk, const NumericMatrix h, const IntegerMatrix hindex, const LogicalMatrix mbool);
RcppExport SEXP _secr_polygonfxicpp(SEXP ncSEXP, SEXP detectfnSEXP, SEXP grainSEXP, SEXP ncoresSEXP, SEXP minpSEXP, SEXP binomNSEXP, SEXP wSEXP, SEXP xySEXP, SEXP startSEXP, SEXP groupSEXP, SEXP hkSEXP, SEXP HSEXP, SEXP gsbvalSEXP, SEXP pIDSEXP, SEXP maskSEXP, SEXP densitySEXP, SEXP PIASEXP, SEXP TskSEXP, SEXP hSEXP, SEXP hindexSEXP, SEXP mboolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type nc(ncSEXP);
    Rcpp::traits::input_parameter< const int >::type detectfn(detectfnSEXP);
    Rcpp::traits::input_parameter< const int >::type grain(grainSEXP);
    Rcpp::traits::input_parameter< const int >::type ncores(ncoresSEXP);
    Rcpp::traits::input_parameter< const double >::type minp(minpSEXP);
    Rcpp::traits::input_parameter< const IntegerVector >::type binomN(binomNSEXP);
    Rcpp::traits::input_parameter< const IntegerVector >::type w(wSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type xy(xySEXP);
    Rcpp::traits::input_parameter< const IntegerVector >::type start(startSEXP);
    Rcpp::traits::input_parameter< const IntegerVector >::type group(groupSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type hk(hkSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type H(HSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type gsbval(gsbvalSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type pID(pIDSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type mask(maskSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type density(densitySEXP);
    Rcpp::traits::input_parameter< const IntegerVector >::type PIA(PIASEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type Tsk(TskSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type h(hSEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix >::type hindex(hindexSEXP);
    Rcpp::traits::input_parameter< const LogicalMatrix >::type mbool(mboolSEXP);
    rcpp_result_gen = Rcpp::wrap(polygonfxicpp(nc, detectfn, grain, ncores, minp, binomN, w, xy, start, group, hk, H, gsbval, pID, mask, density, PIA, Tsk, h, hindex, mbool));
    return rcpp_result_gen;
END_RCPP
}
// signalhistoriescpp
NumericVector signalhistoriescpp(const int mm, const int nc, const int detectfn, const int grain, const int ncores, const IntegerVector binomN, const IntegerVector w, const NumericMatrix signal, const IntegerVector group, const NumericVector gk, const NumericMatrix gsbval, const NumericMatrix dist2, const NumericMatrix density, const IntegerVector PIA, const NumericVector miscparm, const LogicalMatrix mbool);
RcppExport SEXP _secr_signalhistoriescpp(SEXP mmSEXP, SEXP ncSEXP, SEXP detectfnSEXP, SEXP grainSEXP, SEXP ncoresSEXP, SEXP binomNSEXP, SEXP wSEXP, SEXP signalSEXP, SEXP groupSEXP, SEXP gkSEXP, SEXP gsbvalSEXP, SEXP dist2SEXP, SEXP densitySEXP, SEXP PIASEXP, SEXP miscparmSEXP, SEXP mboolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type mm(mmSEXP);
    Rcpp::traits::input_parameter< const int >::type nc(ncSEXP);
    Rcpp::traits::input_parameter< const int >::type detectfn(detectfnSEXP);
    Rcpp::traits::input_parameter< const int >::type grain(grainSEXP);
    Rcpp::traits::input_parameter< const int >::type ncores(ncoresSEXP);
    Rcpp::traits::input_parameter< const IntegerVector >::type binomN(binomNSEXP);
    Rcpp::traits::input_parameter< const IntegerVector >::type w(wSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type signal(signalSEXP);
    Rcpp::traits::input_parameter< const IntegerVector >::type group(groupSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type gk(gkSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type gsbval(gsbvalSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type dist2(dist2SEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type density(densitySEXP);
    Rcpp::traits::input_parameter< const IntegerVector >::type PIA(PIASEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type miscparm(miscparmSEXP);
    Rcpp::traits::input_parameter< const LogicalMatrix >::type mbool(mboolSEXP);
    rcpp_result_gen = Rcpp::wrap(signalhistoriescpp(mm, nc, detectfn, grain, ncores, binomN, w, signal, group, gk, gsbval, dist2, density, PIA, miscparm, mbool));
    return rcpp_result_gen;
END_RCPP
}
// gethr
NumericVector gethr(const int nc, const int fn, const IntegerVector& start, const NumericMatrix& xy, const NumericMatrix& mask, const NumericMatrix& gsbval, const double telemscale);
RcppExport SEXP _secr_gethr(SEXP ncSEXP, SEXP fnSEXP, SEXP startSEXP, SEXP xySEXP, SEXP maskSEXP, SEXP gsbvalSEXP, SEXP telemscaleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type nc(ncSEXP);
    Rcpp::traits::input_parameter< const int >::type fn(fnSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type start(startSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type xy(xySEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type mask(maskSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type gsbval(gsbvalSEXP);
    Rcpp::traits::input_parameter< const double >::type telemscale(telemscaleSEXP);
    rcpp_result_gen = Rcpp::wrap(gethr(nc, fn, start, xy, mask, gsbval, telemscale));
    return rcpp_result_gen;
END_RCPP
}
// simplehistoriescpp
List simplehistoriescpp(const int mm, const int nc, const int cc, const int grain, const int ncores, const IntegerVector binomN, const IntegerVector markocc, const IntegerVector firstocc, const NumericVector pID, const IntegerVector w, const IntegerVector group, const NumericVector gk, const NumericVector hk, const NumericMatrix density, const IntegerVector PIA, const NumericMatrix Tsk, const NumericMatrix h, const IntegerMatrix hindex, const LogicalMatrix mbool, const NumericVector telemhr, const IntegerVector telemstart);
RcppExport SEXP _secr_simplehistoriescpp(SEXP mmSEXP, SEXP ncSEXP, SEXP ccSEXP, SEXP grainSEXP, SEXP ncoresSEXP, SEXP binomNSEXP, SEXP markoccSEXP, SEXP firstoccSEXP, SEXP pIDSEXP, SEXP wSEXP, SEXP groupSEXP, SEXP gkSEXP, SEXP hkSEXP, SEXP densitySEXP, SEXP PIASEXP, SEXP TskSEXP, SEXP hSEXP, SEXP hindexSEXP, SEXP mboolSEXP, SEXP telemhrSEXP, SEXP telemstartSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type mm(mmSEXP);
    Rcpp::traits::input_parameter< const int >::type nc(ncSEXP);
    Rcpp::traits::input_parameter< const int >::type cc(ccSEXP);
    Rcpp::traits::input_parameter< const int >::type grain(grainSEXP);
    Rcpp::traits::input_parameter< const int >::type ncores(ncoresSEXP);
    Rcpp::traits::input_parameter< const IntegerVector >::type binomN(binomNSEXP);
    Rcpp::traits::input_parameter< const IntegerVector >::type markocc(markoccSEXP);
    Rcpp::traits::input_parameter< const IntegerVector >::type firstocc(firstoccSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type pID(pIDSEXP);
    Rcpp::traits::input_parameter< const IntegerVector >::type w(wSEXP);
    Rcpp::traits::input_parameter< const IntegerVector >::type group(groupSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type gk(gkSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type hk(hkSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type density(densitySEXP);
    Rcpp::traits::input_parameter< const IntegerVector >::type PIA(PIASEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type Tsk(TskSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type h(hSEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix >::type hindex(hindexSEXP);
    Rcpp::traits::input_parameter< const LogicalMatrix >::type mbool(mboolSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type telemhr(telemhrSEXP);
    Rcpp::traits::input_parameter< const IntegerVector >::type telemstart(telemstartSEXP);
    rcpp_result_gen = Rcpp::wrap(simplehistoriescpp(mm, nc, cc, grain, ncores, binomN, markocc, firstocc, pID, w, group, gk, hk, density, PIA, Tsk, h, hindex, mbool, telemhr, telemstart));
    return rcpp_result_gen;
END_RCPP
}
// simplehistoriesfxicpp
NumericMatrix simplehistoriesfxicpp(const int x, const int mm, const int nc, const int cc, const int grain, const int ncores, const IntegerVector binomN, const IntegerVector w, const IntegerVector group, const NumericVector gk, const NumericVector hk, const NumericMatrix density, const IntegerVector PIA, const NumericMatrix Tsk, const NumericMatrix h, const IntegerMatrix hindex);
RcppExport SEXP _secr_simplehistoriesfxicpp(SEXP xSEXP, SEXP mmSEXP, SEXP ncSEXP, SEXP ccSEXP, SEXP grainSEXP, SEXP ncoresSEXP, SEXP binomNSEXP, SEXP wSEXP, SEXP groupSEXP, SEXP gkSEXP, SEXP hkSEXP, SEXP densitySEXP, SEXP PIASEXP, SEXP TskSEXP, SEXP hSEXP, SEXP hindexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int >::type mm(mmSEXP);
    Rcpp::traits::input_parameter< const int >::type nc(ncSEXP);
    Rcpp::traits::input_parameter< const int >::type cc(ccSEXP);
    Rcpp::traits::input_parameter< const int >::type grain(grainSEXP);
    Rcpp::traits::input_parameter< const int >::type ncores(ncoresSEXP);
    Rcpp::traits::input_parameter< const IntegerVector >::type binomN(binomNSEXP);
    Rcpp::traits::input_parameter< const IntegerVector >::type w(wSEXP);
    Rcpp::traits::input_parameter< const IntegerVector >::type group(groupSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type gk(gkSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type hk(hkSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type density(densitySEXP);
    Rcpp::traits::input_parameter< const IntegerVector >::type PIA(PIASEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type Tsk(TskSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type h(hSEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix >::type hindex(hindexSEXP);
    rcpp_result_gen = Rcpp::wrap(simplehistoriesfxicpp(x, mm, nc, cc, grain, ncores, binomN, w, group, gk, hk, density, PIA, Tsk, h, hindex));
    return rcpp_result_gen;
END_RCPP
}
// Tsightinglikcpp
List Tsightinglikcpp(const Rcpp::IntegerMatrix& T, const Rcpp::IntegerVector& markocc, const Rcpp::IntegerVector& binomN, const Rcpp::NumericMatrix& Tsk, const Rcpp::NumericMatrix& musk, const int debug);
RcppExport SEXP _secr_Tsightinglikcpp(SEXP TSEXP, SEXP markoccSEXP, SEXP binomNSEXP, SEXP TskSEXP, SEXP muskSEXP, SEXP debugSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerMatrix& >::type T(TSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type markocc(markoccSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type binomN(binomNSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type Tsk(TskSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type musk(muskSEXP);
    Rcpp::traits::input_parameter< const int >::type debug(debugSEXP);
    rcpp_result_gen = Rcpp::wrap(Tsightinglikcpp(T, markocc, binomN, Tsk, musk, debug));
    return rcpp_result_gen;
END_RCPP
}
// sightingchatcpp
List sightingchatcpp(const int mm, const int nc, const int cc0, const int grain, const int ncores, const int nsim, const int sightmodel, const double sumD, const double area, const int distrib, const IntegerVector binomN, const IntegerVector markocc, const NumericMatrix pID, const IntegerVector group, const NumericVector gk0, const NumericVector hk0, const NumericMatrix density, const IntegerVector PIA0, const NumericMatrix Tsk, const NumericVector pmix);
RcppExport SEXP _secr_sightingchatcpp(SEXP mmSEXP, SEXP ncSEXP, SEXP cc0SEXP, SEXP grainSEXP, SEXP ncoresSEXP, SEXP nsimSEXP, SEXP sightmodelSEXP, SEXP sumDSEXP, SEXP areaSEXP, SEXP distribSEXP, SEXP binomNSEXP, SEXP markoccSEXP, SEXP pIDSEXP, SEXP groupSEXP, SEXP gk0SEXP, SEXP hk0SEXP, SEXP densitySEXP, SEXP PIA0SEXP, SEXP TskSEXP, SEXP pmixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type mm(mmSEXP);
    Rcpp::traits::input_parameter< const int >::type nc(ncSEXP);
    Rcpp::traits::input_parameter< const int >::type cc0(cc0SEXP);
    Rcpp::traits::input_parameter< const int >::type grain(grainSEXP);
    Rcpp::traits::input_parameter< const int >::type ncores(ncoresSEXP);
    Rcpp::traits::input_parameter< const int >::type nsim(nsimSEXP);
    Rcpp::traits::input_parameter< const int >::type sightmodel(sightmodelSEXP);
    Rcpp::traits::input_parameter< const double >::type sumD(sumDSEXP);
    Rcpp::traits::input_parameter< const double >::type area(areaSEXP);
    Rcpp::traits::input_parameter< const int >::type distrib(distribSEXP);
    Rcpp::traits::input_parameter< const IntegerVector >::type binomN(binomNSEXP);
    Rcpp::traits::input_parameter< const IntegerVector >::type markocc(markoccSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type pID(pIDSEXP);
    Rcpp::traits::input_parameter< const IntegerVector >::type group(groupSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type gk0(gk0SEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type hk0(hk0SEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type density(densitySEXP);
    Rcpp::traits::input_parameter< const IntegerVector >::type PIA0(PIA0SEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type Tsk(TskSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type pmix(pmixSEXP);
    rcpp_result_gen = Rcpp::wrap(sightingchatcpp(mm, nc, cc0, grain, ncores, nsim, sightmodel, sumD, area, distrib, binomN, markocc, pID, group, gk0, hk0, density, PIA0, Tsk, pmix));
    return rcpp_result_gen;
END_RCPP
}
// expectedmucpp
List expectedmucpp(const int nc, const int cc, const bool Tu, const bool Tm, const int sightmodel, const IntegerVector binomN, const IntegerVector markocc, const NumericVector pID, const IntegerVector group, const NumericVector gk, const NumericVector hk, const NumericMatrix pi_density, const NumericMatrix Nm, const IntegerVector PIA, const NumericMatrix Tsk, const NumericMatrix h, const IntegerMatrix hindex, const NumericVector a0);
RcppExport SEXP _secr_expectedmucpp(SEXP ncSEXP, SEXP ccSEXP, SEXP TuSEXP, SEXP TmSEXP, SEXP sightmodelSEXP, SEXP binomNSEXP, SEXP markoccSEXP, SEXP pIDSEXP, SEXP groupSEXP, SEXP gkSEXP, SEXP hkSEXP, SEXP pi_densitySEXP, SEXP NmSEXP, SEXP PIASEXP, SEXP TskSEXP, SEXP hSEXP, SEXP hindexSEXP, SEXP a0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type nc(ncSEXP);
    Rcpp::traits::input_parameter< const int >::type cc(ccSEXP);
    Rcpp::traits::input_parameter< const bool >::type Tu(TuSEXP);
    Rcpp::traits::input_parameter< const bool >::type Tm(TmSEXP);
    Rcpp::traits::input_parameter< const int >::type sightmodel(sightmodelSEXP);
    Rcpp::traits::input_parameter< const IntegerVector >::type binomN(binomNSEXP);
    Rcpp::traits::input_parameter< const IntegerVector >::type markocc(markoccSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type pID(pIDSEXP);
    Rcpp::traits::input_parameter< const IntegerVector >::type group(groupSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type gk(gkSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type hk(hkSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type pi_density(pi_densitySEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type Nm(NmSEXP);
    Rcpp::traits::input_parameter< const IntegerVector >::type PIA(PIASEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type Tsk(TskSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type h(hSEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix >::type hindex(hindexSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type a0(a0SEXP);
    rcpp_result_gen = Rcpp::wrap(expectedmucpp(nc, cc, Tu, Tm, sightmodel, binomN, markocc, pID, group, gk, hk, pi_density, Nm, PIA, Tsk, h, hindex, a0));
    return rcpp_result_gen;
END_RCPP
}
// simdetectpointcpp
List simdetectpointcpp(const int& detect, const int& N, const int& cc0, const int& cc, const NumericVector& gk0, const NumericVector& gk, const NumericVector& hk0, const NumericVector& hk, const IntegerVector& PIA0, const IntegerVector& PIA1, const int& nmix, const IntegerVector& knownclass, const NumericVector& pmix, const NumericMatrix& Tsk, const int& btype, const int& Markov, const IntegerVector& binomN);
RcppExport SEXP _secr_simdetectpointcpp(SEXP detectSEXP, SEXP NSEXP, SEXP cc0SEXP, SEXP ccSEXP, SEXP gk0SEXP, SEXP gkSEXP, SEXP hk0SEXP, SEXP hkSEXP, SEXP PIA0SEXP, SEXP PIA1SEXP, SEXP nmixSEXP, SEXP knownclassSEXP, SEXP pmixSEXP, SEXP TskSEXP, SEXP btypeSEXP, SEXP MarkovSEXP, SEXP binomNSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type detect(detectSEXP);
    Rcpp::traits::input_parameter< const int& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const int& >::type cc0(cc0SEXP);
    Rcpp::traits::input_parameter< const int& >::type cc(ccSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gk0(gk0SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gk(gkSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type hk0(hk0SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type hk(hkSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type PIA0(PIA0SEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type PIA1(PIA1SEXP);
    Rcpp::traits::input_parameter< const int& >::type nmix(nmixSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type knownclass(knownclassSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type pmix(pmixSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type Tsk(TskSEXP);
    Rcpp::traits::input_parameter< const int& >::type btype(btypeSEXP);
    Rcpp::traits::input_parameter< const int& >::type Markov(MarkovSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type binomN(binomNSEXP);
    rcpp_result_gen = Rcpp::wrap(simdetectpointcpp(detect, N, cc0, cc, gk0, gk, hk0, hk, PIA0, PIA1, nmix, knownclass, pmix, Tsk, btype, Markov, binomN));
    return rcpp_result_gen;
END_RCPP
}
// simdetectpolycpp
List simdetectpolycpp(const int detect, const int fn, const int nmix, const int btype, const int Markov, const IntegerVector& kk, const NumericMatrix& animals, const NumericMatrix& traps, const NumericMatrix& gsb0val, const NumericMatrix& gsb1val, const IntegerVector& PIA0, const IntegerVector& PIA1, const IntegerVector& knownclass, const NumericVector& pmix, const NumericMatrix& Tsk, const IntegerVector& binomN, const int maxperpoly);
RcppExport SEXP _secr_simdetectpolycpp(SEXP detectSEXP, SEXP fnSEXP, SEXP nmixSEXP, SEXP btypeSEXP, SEXP MarkovSEXP, SEXP kkSEXP, SEXP animalsSEXP, SEXP trapsSEXP, SEXP gsb0valSEXP, SEXP gsb1valSEXP, SEXP PIA0SEXP, SEXP PIA1SEXP, SEXP knownclassSEXP, SEXP pmixSEXP, SEXP TskSEXP, SEXP binomNSEXP, SEXP maxperpolySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type detect(detectSEXP);
    Rcpp::traits::input_parameter< const int >::type fn(fnSEXP);
    Rcpp::traits::input_parameter< const int >::type nmix(nmixSEXP);
    Rcpp::traits::input_parameter< const int >::type btype(btypeSEXP);
    Rcpp::traits::input_parameter< const int >::type Markov(MarkovSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type kk(kkSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type animals(animalsSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type traps(trapsSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type gsb0val(gsb0valSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type gsb1val(gsb1valSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type PIA0(PIA0SEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type PIA1(PIA1SEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type knownclass(knownclassSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type pmix(pmixSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type Tsk(TskSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type binomN(binomNSEXP);
    Rcpp::traits::input_parameter< const int >::type maxperpoly(maxperpolySEXP);
    rcpp_result_gen = Rcpp::wrap(simdetectpolycpp(detect, fn, nmix, btype, Markov, kk, animals, traps, gsb0val, gsb1val, PIA0, PIA1, knownclass, pmix, Tsk, binomN, maxperpoly));
    return rcpp_result_gen;
END_RCPP
}
// simdetectsignalcpp
List simdetectsignalcpp(const int detect, const int nmix, const int fn, const double cut, const NumericMatrix& gsb0val, const IntegerVector& PIA0, const NumericVector& pmix, const IntegerVector& knownclass, const NumericMatrix& animals, const NumericMatrix& traps, const NumericMatrix& dist2, const NumericMatrix& Tsk, const NumericVector& miscparm);
RcppExport SEXP _secr_simdetectsignalcpp(SEXP detectSEXP, SEXP nmixSEXP, SEXP fnSEXP, SEXP cutSEXP, SEXP gsb0valSEXP, SEXP PIA0SEXP, SEXP pmixSEXP, SEXP knownclassSEXP, SEXP animalsSEXP, SEXP trapsSEXP, SEXP dist2SEXP, SEXP TskSEXP, SEXP miscparmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type detect(detectSEXP);
    Rcpp::traits::input_parameter< const int >::type nmix(nmixSEXP);
    Rcpp::traits::input_parameter< const int >::type fn(fnSEXP);
    Rcpp::traits::input_parameter< const double >::type cut(cutSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type gsb0val(gsb0valSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type PIA0(PIA0SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type pmix(pmixSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type knownclass(knownclassSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type animals(animalsSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type traps(trapsSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type dist2(dist2SEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type Tsk(TskSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type miscparm(miscparmSEXP);
    rcpp_result_gen = Rcpp::wrap(simdetectsignalcpp(detect, nmix, fn, cut, gsb0val, PIA0, pmix, knownclass, animals, traps, dist2, Tsk, miscparm));
    return rcpp_result_gen;
END_RCPP
}
// expdetectpointcpp
NumericVector expdetectpointcpp(const int& detect, const int& N, const int& cc0, const int& cc, const NumericVector& gk0, const NumericVector& gk, const NumericVector& hk0, const NumericVector& hk, const IntegerVector& PIA0, const IntegerVector& PIA1, const int& nmix, const IntegerVector& knownclass, const NumericVector& pmix, const NumericMatrix& Tsk, const int& btype, const int& Markov, const IntegerVector& binomN);
RcppExport SEXP _secr_expdetectpointcpp(SEXP detectSEXP, SEXP NSEXP, SEXP cc0SEXP, SEXP ccSEXP, SEXP gk0SEXP, SEXP gkSEXP, SEXP hk0SEXP, SEXP hkSEXP, SEXP PIA0SEXP, SEXP PIA1SEXP, SEXP nmixSEXP, SEXP knownclassSEXP, SEXP pmixSEXP, SEXP TskSEXP, SEXP btypeSEXP, SEXP MarkovSEXP, SEXP binomNSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type detect(detectSEXP);
    Rcpp::traits::input_parameter< const int& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const int& >::type cc0(cc0SEXP);
    Rcpp::traits::input_parameter< const int& >::type cc(ccSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gk0(gk0SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gk(gkSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type hk0(hk0SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type hk(hkSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type PIA0(PIA0SEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type PIA1(PIA1SEXP);
    Rcpp::traits::input_parameter< const int& >::type nmix(nmixSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type knownclass(knownclassSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type pmix(pmixSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type Tsk(TskSEXP);
    Rcpp::traits::input_parameter< const int& >::type btype(btypeSEXP);
    Rcpp::traits::input_parameter< const int& >::type Markov(MarkovSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type binomN(binomNSEXP);
    rcpp_result_gen = Rcpp::wrap(expdetectpointcpp(detect, N, cc0, cc, gk0, gk, hk0, hk, PIA0, PIA1, nmix, knownclass, pmix, Tsk, btype, Markov, binomN));
    return rcpp_result_gen;
END_RCPP
}
// ontransectcpp
bool ontransectcpp(NumericVector xy, NumericMatrix transect, int n1, int n2, double tol);
RcppExport SEXP _secr_ontransectcpp(SEXP xySEXP, SEXP transectSEXP, SEXP n1SEXP, SEXP n2SEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type xy(xySEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type transect(transectSEXP);
    Rcpp::traits::input_parameter< int >::type n1(n1SEXP);
    Rcpp::traits::input_parameter< int >::type n2(n2SEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(ontransectcpp(xy, transect, n1, n2, tol));
    return rcpp_result_gen;
END_RCPP
}
// alongtransectcpp
double alongtransectcpp(NumericVector xy, NumericMatrix transect, int n1, int n2, double tol);
RcppExport SEXP _secr_alongtransectcpp(SEXP xySEXP, SEXP transectSEXP, SEXP n1SEXP, SEXP n2SEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type xy(xySEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type transect(transectSEXP);
    Rcpp::traits::input_parameter< int >::type n1(n1SEXP);
    Rcpp::traits::input_parameter< int >::type n2(n2SEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(alongtransectcpp(xy, transect, n1, n2, tol));
    return rcpp_result_gen;
END_RCPP
}
// trappingsingle
List trappingsingle(const NumericVector& g0, const NumericVector& sigma, const NumericVector& z, const NumericMatrix& dist2, const NumericMatrix& Tsk, const int fn, const double w2, const IntegerVector& binomN, const bool bk);
RcppExport SEXP _secr_trappingsingle(SEXP g0SEXP, SEXP sigmaSEXP, SEXP zSEXP, SEXP dist2SEXP, SEXP TskSEXP, SEXP fnSEXP, SEXP w2SEXP, SEXP binomNSEXP, SEXP bkSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type g0(g0SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type z(zSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type dist2(dist2SEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type Tsk(TskSEXP);
    Rcpp::traits::input_parameter< const int >::type fn(fnSEXP);
    Rcpp::traits::input_parameter< const double >::type w2(w2SEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type binomN(binomNSEXP);
    Rcpp::traits::input_parameter< const bool >::type bk(bkSEXP);
    rcpp_result_gen = Rcpp::wrap(trappingsingle(g0, sigma, z, dist2, Tsk, fn, w2, binomN, bk));
    return rcpp_result_gen;
END_RCPP
}
// trappingmulti
List trappingmulti(const NumericVector& g0, const NumericVector& sigma, const NumericVector& z, const NumericMatrix& dist2, const NumericMatrix& Tsk, const int fn, const double w2, const IntegerVector& binomN, const bool bk);
RcppExport SEXP _secr_trappingmulti(SEXP g0SEXP, SEXP sigmaSEXP, SEXP zSEXP, SEXP dist2SEXP, SEXP TskSEXP, SEXP fnSEXP, SEXP w2SEXP, SEXP binomNSEXP, SEXP bkSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type g0(g0SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type z(zSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type dist2(dist2SEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type Tsk(TskSEXP);
    Rcpp::traits::input_parameter< const int >::type fn(fnSEXP);
    Rcpp::traits::input_parameter< const double >::type w2(w2SEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type binomN(binomNSEXP);
    Rcpp::traits::input_parameter< const bool >::type bk(bkSEXP);
    rcpp_result_gen = Rcpp::wrap(trappingmulti(g0, sigma, z, dist2, Tsk, fn, w2, binomN, bk));
    return rcpp_result_gen;
END_RCPP
}
// trappingcapped
List trappingcapped(const NumericVector& g0, const NumericVector& sigma, const NumericVector& z, const NumericMatrix& dist2, const NumericMatrix& Tsk, const int fn, const double w2, const IntegerVector& binomN, const bool bk);
RcppExport SEXP _secr_trappingcapped(SEXP g0SEXP, SEXP sigmaSEXP, SEXP zSEXP, SEXP dist2SEXP, SEXP TskSEXP, SEXP fnSEXP, SEXP w2SEXP, SEXP binomNSEXP, SEXP bkSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type g0(g0SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type z(zSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type dist2(dist2SEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type Tsk(TskSEXP);
    Rcpp::traits::input_parameter< const int >::type fn(fnSEXP);
    Rcpp::traits::input_parameter< const double >::type w2(w2SEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type binomN(binomNSEXP);
    Rcpp::traits::input_parameter< const bool >::type bk(bkSEXP);
    rcpp_result_gen = Rcpp::wrap(trappingcapped(g0, sigma, z, dist2, Tsk, fn, w2, binomN, bk));
    return rcpp_result_gen;
END_RCPP
}
// trappingproximity
List trappingproximity(const NumericVector& g0, const NumericVector& sigma, const NumericVector& z, const NumericMatrix& dist2, const NumericMatrix& Tsk, const int fn, const double w2, const IntegerVector& binomN, const bool bk);
RcppExport SEXP _secr_trappingproximity(SEXP g0SEXP, SEXP sigmaSEXP, SEXP zSEXP, SEXP dist2SEXP, SEXP TskSEXP, SEXP fnSEXP, SEXP w2SEXP, SEXP binomNSEXP, SEXP bkSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type g0(g0SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type z(zSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type dist2(dist2SEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type Tsk(TskSEXP);
    Rcpp::traits::input_parameter< const int >::type fn(fnSEXP);
    Rcpp::traits::input_parameter< const double >::type w2(w2SEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type binomN(binomNSEXP);
    Rcpp::traits::input_parameter< const bool >::type bk(bkSEXP);
    rcpp_result_gen = Rcpp::wrap(trappingproximity(g0, sigma, z, dist2, Tsk, fn, w2, binomN, bk));
    return rcpp_result_gen;
END_RCPP
}
// trappingcount
List trappingcount(const NumericVector& g0, const NumericVector& sigma, const NumericVector& z, const NumericMatrix& dist2, const NumericMatrix& Tsk, const int fn, const double w2, const IntegerVector& binomN, const bool bk);
RcppExport SEXP _secr_trappingcount(SEXP g0SEXP, SEXP sigmaSEXP, SEXP zSEXP, SEXP dist2SEXP, SEXP TskSEXP, SEXP fnSEXP, SEXP w2SEXP, SEXP binomNSEXP, SEXP bkSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type g0(g0SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type z(zSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type dist2(dist2SEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type Tsk(TskSEXP);
    Rcpp::traits::input_parameter< const int >::type fn(fnSEXP);
    Rcpp::traits::input_parameter< const double >::type w2(w2SEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type binomN(binomNSEXP);
    Rcpp::traits::input_parameter< const bool >::type bk(bkSEXP);
    rcpp_result_gen = Rcpp::wrap(trappingcount(g0, sigma, z, dist2, Tsk, fn, w2, binomN, bk));
    return rcpp_result_gen;
END_RCPP
}
// trappingpolygon
List trappingpolygon(const NumericVector& lambda, const NumericVector& sigma, const NumericVector& z, const int npoly, const IntegerVector& kk, const NumericMatrix& animals, const NumericMatrix& traps, const NumericMatrix& Tsk, const int fn, const double w2, const IntegerVector& binomN, const int maxperpoly);
RcppExport SEXP _secr_trappingpolygon(SEXP lambdaSEXP, SEXP sigmaSEXP, SEXP zSEXP, SEXP npolySEXP, SEXP kkSEXP, SEXP animalsSEXP, SEXP trapsSEXP, SEXP TskSEXP, SEXP fnSEXP, SEXP w2SEXP, SEXP binomNSEXP, SEXP maxperpolySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type z(zSEXP);
    Rcpp::traits::input_parameter< const int >::type npoly(npolySEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type kk(kkSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type animals(animalsSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type traps(trapsSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type Tsk(TskSEXP);
    Rcpp::traits::input_parameter< const int >::type fn(fnSEXP);
    Rcpp::traits::input_parameter< const double >::type w2(w2SEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type binomN(binomNSEXP);
    Rcpp::traits::input_parameter< const int >::type maxperpoly(maxperpolySEXP);
    rcpp_result_gen = Rcpp::wrap(trappingpolygon(lambda, sigma, z, npoly, kk, animals, traps, Tsk, fn, w2, binomN, maxperpoly));
    return rcpp_result_gen;
END_RCPP
}
// trappingtransect
List trappingtransect(const NumericVector& lambda, const NumericVector& sigma, const NumericVector& z, const int ntransect, const IntegerVector& kk, const NumericMatrix& animals, const NumericMatrix& traps, const NumericMatrix& Tsk, const int fn, const double w2, const IntegerVector& binomN, const int maxperpoly);
RcppExport SEXP _secr_trappingtransect(SEXP lambdaSEXP, SEXP sigmaSEXP, SEXP zSEXP, SEXP ntransectSEXP, SEXP kkSEXP, SEXP animalsSEXP, SEXP trapsSEXP, SEXP TskSEXP, SEXP fnSEXP, SEXP w2SEXP, SEXP binomNSEXP, SEXP maxperpolySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type z(zSEXP);
    Rcpp::traits::input_parameter< const int >::type ntransect(ntransectSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type kk(kkSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type animals(animalsSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type traps(trapsSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type Tsk(TskSEXP);
    Rcpp::traits::input_parameter< const int >::type fn(fnSEXP);
    Rcpp::traits::input_parameter< const double >::type w2(w2SEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type binomN(binomNSEXP);
    Rcpp::traits::input_parameter< const int >::type maxperpoly(maxperpolySEXP);
    rcpp_result_gen = Rcpp::wrap(trappingtransect(lambda, sigma, z, ntransect, kk, animals, traps, Tsk, fn, w2, binomN, maxperpoly));
    return rcpp_result_gen;
END_RCPP
}
// trappingpolygonX
List trappingpolygonX(const NumericVector& g0, const NumericVector& sigma, const NumericVector& z, const int npoly, const IntegerVector& kk, const NumericMatrix& animals, const NumericMatrix& traps, const NumericMatrix& Tsk, const int fn, const double w2, const IntegerVector& binomN);
RcppExport SEXP _secr_trappingpolygonX(SEXP g0SEXP, SEXP sigmaSEXP, SEXP zSEXP, SEXP npolySEXP, SEXP kkSEXP, SEXP animalsSEXP, SEXP trapsSEXP, SEXP TskSEXP, SEXP fnSEXP, SEXP w2SEXP, SEXP binomNSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type g0(g0SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type z(zSEXP);
    Rcpp::traits::input_parameter< const int >::type npoly(npolySEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type kk(kkSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type animals(animalsSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type traps(trapsSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type Tsk(TskSEXP);
    Rcpp::traits::input_parameter< const int >::type fn(fnSEXP);
    Rcpp::traits::input_parameter< const double >::type w2(w2SEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type binomN(binomNSEXP);
    rcpp_result_gen = Rcpp::wrap(trappingpolygonX(g0, sigma, z, npoly, kk, animals, traps, Tsk, fn, w2, binomN));
    return rcpp_result_gen;
END_RCPP
}
// trappingtransectX
List trappingtransectX(const NumericVector& lambda, const NumericVector& sigma, const NumericVector& z, const int ntransect, const IntegerVector& kk, const NumericMatrix& animals, const NumericMatrix& traps, const NumericMatrix& Tsk, const int fn, const double w2);
RcppExport SEXP _secr_trappingtransectX(SEXP lambdaSEXP, SEXP sigmaSEXP, SEXP zSEXP, SEXP ntransectSEXP, SEXP kkSEXP, SEXP animalsSEXP, SEXP trapsSEXP, SEXP TskSEXP, SEXP fnSEXP, SEXP w2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type z(zSEXP);
    Rcpp::traits::input_parameter< const int >::type ntransect(ntransectSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type kk(kkSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type animals(animalsSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type traps(trapsSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type Tsk(TskSEXP);
    Rcpp::traits::input_parameter< const int >::type fn(fnSEXP);
    Rcpp::traits::input_parameter< const double >::type w2(w2SEXP);
    rcpp_result_gen = Rcpp::wrap(trappingtransectX(lambda, sigma, z, ntransect, kk, animals, traps, Tsk, fn, w2));
    return rcpp_result_gen;
END_RCPP
}
// trappingsignal
List trappingsignal(const NumericVector& beta0, const NumericVector& beta1, const NumericVector& sdS, const double cut, const NumericVector& muN, const NumericVector& sdN, const double sdM, const NumericMatrix& animals, const NumericMatrix& traps, const NumericMatrix& dist2, const NumericMatrix& Tsk, const int fn);
RcppExport SEXP _secr_trappingsignal(SEXP beta0SEXP, SEXP beta1SEXP, SEXP sdSSEXP, SEXP cutSEXP, SEXP muNSEXP, SEXP sdNSEXP, SEXP sdMSEXP, SEXP animalsSEXP, SEXP trapsSEXP, SEXP dist2SEXP, SEXP TskSEXP, SEXP fnSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type beta0(beta0SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type beta1(beta1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sdS(sdSSEXP);
    Rcpp::traits::input_parameter< const double >::type cut(cutSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type muN(muNSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sdN(sdNSEXP);
    Rcpp::traits::input_parameter< const double >::type sdM(sdMSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type animals(animalsSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type traps(trapsSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type dist2(dist2SEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type Tsk(TskSEXP);
    Rcpp::traits::input_parameter< const int >::type fn(fnSEXP);
    rcpp_result_gen = Rcpp::wrap(trappingsignal(beta0, beta1, sdS, cut, muN, sdN, sdM, animals, traps, dist2, Tsk, fn));
    return rcpp_result_gen;
END_RCPP
}
// trappingtelemetry
List trappingtelemetry(const NumericVector& lambda, const NumericVector& sigma, const NumericVector& z, const NumericMatrix& animals, const int ss, const int fn, const double w2, const IntegerVector& binomN, const int exactn, const int maxperpoly);
RcppExport SEXP _secr_trappingtelemetry(SEXP lambdaSEXP, SEXP sigmaSEXP, SEXP zSEXP, SEXP animalsSEXP, SEXP ssSEXP, SEXP fnSEXP, SEXP w2SEXP, SEXP binomNSEXP, SEXP exactnSEXP, SEXP maxperpolySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type z(zSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type animals(animalsSEXP);
    Rcpp::traits::input_parameter< const int >::type ss(ssSEXP);
    Rcpp::traits::input_parameter< const int >::type fn(fnSEXP);
    Rcpp::traits::input_parameter< const double >::type w2(w2SEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type binomN(binomNSEXP);
    Rcpp::traits::input_parameter< const int >::type exactn(exactnSEXP);
    Rcpp::traits::input_parameter< const int >::type maxperpoly(maxperpolySEXP);
    rcpp_result_gen = Rcpp::wrap(trappingtelemetry(lambda, sigma, z, animals, ss, fn, w2, binomN, exactn, maxperpoly));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_secr_edist2cpp", (DL_FUNC) &_secr_edist2cpp, 2},
    {"_secr_xydist2cpp", (DL_FUNC) &_secr_xydist2cpp, 2},
    {"_secr_nearestcpp", (DL_FUNC) &_secr_nearestcpp, 3},
    {"_secr_insidecpp", (DL_FUNC) &_secr_insidecpp, 4},
    {"_secr_movematcpp", (DL_FUNC) &_secr_movematcpp, 2},
    {"_secr_naivedcpp", (DL_FUNC) &_secr_naivedcpp, 5},
    {"_secr_naivecap3cpp", (DL_FUNC) &_secr_naivecap3cpp, 7},
    {"_secr_getdenomcpp", (DL_FUNC) &_secr_getdenomcpp, 6},
    {"_secr_gethcpp", (DL_FUNC) &_secr_gethcpp, 9},
    {"_secr_hdotpolycpp", (DL_FUNC) &_secr_hdotpolycpp, 11},
    {"_secr_makegkPointcpp", (DL_FUNC) &_secr_makegkPointcpp, 6},
    {"_secr_cappedgkhkcpp", (DL_FUNC) &_secr_cappedgkhkcpp, 6},
    {"_secr_makegkPolygoncpp", (DL_FUNC) &_secr_makegkPolygoncpp, 9},
    {"_secr_makelookupcpp", (DL_FUNC) &_secr_makelookupcpp, 1},
    {"_secr_nkpointcpp", (DL_FUNC) &_secr_nkpointcpp, 12},
    {"_secr_pdotpointcpp", (DL_FUNC) &_secr_pdotpointcpp, 15},
    {"_secr_fasthistoriescpp", (DL_FUNC) &_secr_fasthistoriescpp, 15},
    {"_secr_polygonhistoriescpp", (DL_FUNC) &_secr_polygonhistoriescpp, 22},
    {"_secr_polygonfxicpp", (DL_FUNC) &_secr_polygonfxicpp, 21},
    {"_secr_signalhistoriescpp", (DL_FUNC) &_secr_signalhistoriescpp, 16},
    {"_secr_gethr", (DL_FUNC) &_secr_gethr, 7},
    {"_secr_simplehistoriescpp", (DL_FUNC) &_secr_simplehistoriescpp, 21},
    {"_secr_simplehistoriesfxicpp", (DL_FUNC) &_secr_simplehistoriesfxicpp, 16},
    {"_secr_Tsightinglikcpp", (DL_FUNC) &_secr_Tsightinglikcpp, 6},
    {"_secr_sightingchatcpp", (DL_FUNC) &_secr_sightingchatcpp, 20},
    {"_secr_expectedmucpp", (DL_FUNC) &_secr_expectedmucpp, 18},
    {"_secr_simdetectpointcpp", (DL_FUNC) &_secr_simdetectpointcpp, 17},
    {"_secr_simdetectpolycpp", (DL_FUNC) &_secr_simdetectpolycpp, 17},
    {"_secr_simdetectsignalcpp", (DL_FUNC) &_secr_simdetectsignalcpp, 13},
    {"_secr_expdetectpointcpp", (DL_FUNC) &_secr_expdetectpointcpp, 17},
    {"_secr_ontransectcpp", (DL_FUNC) &_secr_ontransectcpp, 5},
    {"_secr_alongtransectcpp", (DL_FUNC) &_secr_alongtransectcpp, 5},
    {"_secr_trappingsingle", (DL_FUNC) &_secr_trappingsingle, 9},
    {"_secr_trappingmulti", (DL_FUNC) &_secr_trappingmulti, 9},
    {"_secr_trappingcapped", (DL_FUNC) &_secr_trappingcapped, 9},
    {"_secr_trappingproximity", (DL_FUNC) &_secr_trappingproximity, 9},
    {"_secr_trappingcount", (DL_FUNC) &_secr_trappingcount, 9},
    {"_secr_trappingpolygon", (DL_FUNC) &_secr_trappingpolygon, 12},
    {"_secr_trappingtransect", (DL_FUNC) &_secr_trappingtransect, 12},
    {"_secr_trappingpolygonX", (DL_FUNC) &_secr_trappingpolygonX, 11},
    {"_secr_trappingtransectX", (DL_FUNC) &_secr_trappingtransectX, 10},
    {"_secr_trappingsignal", (DL_FUNC) &_secr_trappingsignal, 12},
    {"_secr_trappingtelemetry", (DL_FUNC) &_secr_trappingtelemetry, 10},
    {NULL, NULL, 0}
};

RcppExport void R_init_secr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
